#!python3
"""
Generate GeoJSON output from the StaMPS output that is contained
in Matlab .mat files.
"""

import numpy as np
import argparse

from datetime import datetime, timedelta
from scipy.io import loadmat
from pathlib import Path
from osgeo import ogr

def to_datetime(d:int):
    dt = datetime.fromordinal(d) + \
                      timedelta(days=d%1) - \
                      timedelta(days=366)
    return dt

def format_dds(md, days):
    md = to_datetime(int(md)).strftime("%Y%m%d")
    return [f"{md}_{to_datetime(int(day)).strftime('%Y%m%d')}" for day in days]

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', type=Path, help='Path to StaMPS output .mat file')
    args = parser.parse_args()

    psver = loadmat(args.path / 'psver.mat')['psver'].flat[0]
    print(f"{psver=}")

    ps = loadmat(args.path / f'ps{psver}.mat')
    n_ifg = ps['n_ifg'][0][0]
    n_ps = ps['n_ps'][0][0]
    day = ps['day'].flatten()
    master_day = ps['master_day'][0][0]
    dds = format_dds(master_day, day)
    master_ix = int(sum(day < master_day) + 1)

    print(f"{n_ifg=}")
    print(f"{n_ps=}")
    print(f"{master_ix=}")
    print(f"{dds=}")

    # Get the lat/lon coordinates
    lls = ps['lonlat']
    print(f"{lls.shape=}")

    # Get the unwrapped phase data
    phuw = loadmat(args.path / f'phuw{psver}.mat')['ph_uw']
    print(f"{phuw.shape=}")

    # Load data
    pm = loadmat(args.path / f'pm{psver}.mat')
    ph_all = pm['ph_patch'] / np.abs(pm['ph_patch'])
    print(f"{ph_all.shape=}")

    print(f"{ph_all[:,:(master_ix-1)].shape=}")
    print(f"{np.zeros((n_ps, 1)).shape=}")
    print(f"{ph_all[:, master_ix:].shape=}")

    if n_ifg != ph_all.shape[1]:
        ph_all = np.hstack([ph_all[:,:(master_ix-1)],
                            np.zeros((n_ps, 1)),
                            ph_all[:, master_ix:]])
    print(f"{ph_all.shape=}")

    # Write data to a GeoJSONL file using ogr
    driver = ogr.GetDriverByName('GeoJSONSeq')
    ds = driver.CreateDataSource('data.geojsonl')
    layer = ds.CreateLayer('data', geom_type=ogr.wkbPoint)
    layer.CreateField(ogr.FieldDefn('datetime', ogr.OFTString))
    layer.CreateField(ogr.FieldDefn('unwrapped_phase', ogr.OFTString))
    layer.CreateField(ogr.FieldDefn('wrapped_phase', ogr.OFTString))

    when = ",".join(dds)

    for i, (lon, lat) in enumerate(lls):
        print(f"i={i}, lon={lon}, lat={lat}\r", end='')
        pt = ogr.Geometry(ogr.wkbPoint)
        pt.AddPoint(lon, lat)
        feat = ogr.Feature(layer.GetLayerDefn())
        feat.SetGeometry(pt)

        uw = ",".join([str(x) for x in phuw[i,:]])
        wp = ",".join([str(x) for x in ph_all[i,:]])

        feat.SetField('datetime', when)
        feat.SetField('unwrapped_phase', uw)
        feat.SetField('wrapped_phase', wp)

        layer.CreateFeature(feat)

    ds = None

if __name__ == '__main__':
    main()
