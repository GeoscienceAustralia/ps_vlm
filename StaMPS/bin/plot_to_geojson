#!/usr/bin/env python3
"""
This program reads MATLAB file specified by the user, extracting the 'values'
vector and 'lonlat' matrix from another file 'ps2.mat'. It then creates a GeoJSON file 
at a user-specified location representing points with longitude, latitude, 
and associated 'values'.
"""

import scipy.io as sio
import argparse
import json
import sys

def log(msg: str) -> None:
    """Prints a message to stderr."""
    print(msg, file=sys.stderr)

def read_mat_file(file_name: str, var_name: str):
    """Reads specified variable from a MATLAB file."""
    mat_contents = sio.loadmat(file_name)
    return mat_contents[var_name]

def create_geojson(lonlat: list, values: list, geojson_file: str) -> None:
    """Creates a GeoJSON file with point locations and associated values."""
    features = []
    for i in range(len(values)):
        point = {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [float(lonlat[i][0]), float(lonlat[i][1])]
            },
            "properties": {
                "value": float(values[i])
            }
        }
        features.append(point)

    geojson = {
        "type": "FeatureCollection",
        "features": features
    }

    with open(geojson_file, 'w') as f:
        json.dump(geojson, f)

def main():
    parser = argparse.ArgumentParser(description="Generate GeoJSON from MATLAB data.")
    parser.add_argument("mat_file", help="Path to the MATLAB file containing 'values'")
    parser.add_argument("geojson_file", help="Path to the output GeoJSON file")
    args = parser.parse_args()

    try:
        values = read_mat_file(args.mat_file, 'ph_disp').flatten()
        log(f"Read {len(values)} values from {args.mat_file}.")
        lonlat = read_mat_file('ps2.mat', 'lonlat')
        log(f"Read {len(lonlat)} lonlat pairs from ps2.mat.")
        create_geojson(lonlat, values, args.geojson_file)
        log(f"Created GeoJSON file at {args.geojson_file}.")
    except Exception as e:
        log(f"Error: {e}")

if __name__ == "__main__":
    main()
